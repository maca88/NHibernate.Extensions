//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NHibernate.Tool.hbm2ddl;
using NUnit.Framework;

namespace NHibernate.Extensions.Tests
{
    public partial class SessionSubscriptionTests
    {
        [Test]
        public async Task TestTransactionSubscriptionAsync()
        {
            using (var session = NHConfig.OpenSession())
            using (var transaction = session.BeginTransaction())
            {
                var beforeCommitExecuted = false;
                var afterCommitExecuted = false;

                session.Subscribe(o => o.Transaction
                    .BeforeCommit(s =>
                    {
                        Assert.AreEqual(session, s);
                        Assert.IsTrue(s.Transaction.IsActive);
                        beforeCommitExecuted = true;
                    })
                    .AfterCommit((s, success) =>
                    {
                        Assert.IsTrue(success);
                        Assert.AreEqual(session, s);
                        Assert.IsFalse(s.Transaction.IsActive);
                        afterCommitExecuted = true;
                    }));

                Assert.IsFalse(beforeCommitExecuted);
                Assert.IsFalse(afterCommitExecuted);
                await (transaction.CommitAsync());
                Assert.IsTrue(beforeCommitExecuted);
                Assert.IsTrue(afterCommitExecuted);
            }
        }

        [Test]
        public async Task TestTransactionSubscriptionRollbackAsync()
        {
            using (var session = NHConfig.OpenSession())
            using (var transaction = session.BeginTransaction())
            {
                var beforeCommitExecuted = false;
                var afterCommitExecuted = false;

                // BeforeCommit wont be executed on rollback
                session.Subscribe(o => o.Transaction
                    .BeforeCommit(s =>
                    {
                        Assert.AreEqual(session, s);
                        Assert.IsTrue(s.Transaction.IsActive);
                        beforeCommitExecuted = true;
                    })
                    .AfterCommit((s, success) =>
                    {
                        Assert.IsFalse(success);
                        Assert.AreEqual(session, s);
                        Assert.IsFalse(s.Transaction.IsActive);
                        afterCommitExecuted = true;
                    }));

                Assert.IsFalse(beforeCommitExecuted);
                Assert.IsFalse(afterCommitExecuted);
                await (transaction.RollbackAsync());
                Assert.IsFalse(beforeCommitExecuted);
                Assert.IsTrue(afterCommitExecuted);
            }
        }
    }
}
