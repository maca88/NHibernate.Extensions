//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using NHibernate.Extensions.Tests.Entities;
using NHibernate.Tool.hbm2ddl;
using NUnit.Framework;

namespace NHibernate.Extensions.Tests
{
    using System.Threading.Tasks;
    public partial class BatchFetchTests
    {

        [Test]
        public async Task TestSelectAnonymousTypeAsync()
        {
            var keys = Enumerable.Range(1, 600).ToList();

            using (var session = NHConfig.OpenSession())
            {
                var stats = session.SessionFactory.Statistics;
                var queryCount = stats.PrepareStatementCount;
                var models = await (session.BatchFetch<BatchModel>(50)
                    .SetKeys(keys, o => o.Id)
                    .BeforeQueryExecution(q => q.Where(o => o.Id > 400))
                    .Select(o => new { o.Name })
                    .ExecuteAsync());

                var expectedQueryCount = (int)Math.Ceiling(keys.Count / 50m);
                Assert.AreEqual(200, models.Count);
                Assert.AreEqual(expectedQueryCount, stats.PrepareStatementCount - queryCount);
            }
        }

        [Test]
        public async Task TestSelectStringAsync()
        {
            var keys = Enumerable.Range(1, 600).ToList();

            using (var session = NHConfig.OpenSession())
            {
                var stats = session.SessionFactory.Statistics;
                var queryCount = stats.PrepareStatementCount;
                var models = await (session.BatchFetch<BatchModel>(50)
                    .SetKeys(keys, o => o.Id)
                    .Select(o => o.Name)
                    .BeforeQueryExecution(q => q.Where(o => o.Id > 400))
                    .ExecuteAsync());

                var expectedQueryCount = (int)Math.Ceiling(keys.Count / 50m);
                Assert.AreEqual(200, models.Count);
                Assert.AreEqual(expectedQueryCount, stats.PrepareStatementCount - queryCount);
            }
        }
    }
}
