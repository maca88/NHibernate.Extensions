//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using NHibernate.Extensions.Tests.Entities;
using NHibernate.Linq;
using NUnit.Framework;

namespace NHibernate.Extensions.Tests
{
    using System.Threading.Tasks;
    public partial class DeepCloneTests : BaseIncludeTest
    {
        [Test]
        public async Task TestSimplePropertiesAsync()
        {
            EQBPerson clone;
            EQBPerson petra;

            using (var session = NHConfig.OpenSession())
            {
                petra = session.Query<EQBPerson>()
                    .First(o => o.Name == "Petra");
                clone = await (session.DeepCloneAsync(petra, o => o
                    .ForType<EQBPerson>(t => 
                        t.ForMember(m => m.Name, opts => opts.Ignore())
                        )));
                // Lazy load some relations after cloning
                var friend = petra.BestFriend;
                var card = petra.IdentityCard;

            }
            Assert.AreEqual(petra.Id, clone.Id);
            Assert.AreEqual(null, clone.Name);
            Assert.AreEqual(petra.LastName, clone.LastName);
            Assert.IsNotNull(petra.BestFriend);
            Assert.IsNotNull(petra.IdentityCard);
            Assert.IsNull(clone.MarriedWith);
            Assert.IsNull(clone.BestFriend);
            Assert.IsNull(clone.IdentityCard);
            Assert.AreEqual(0, clone.OwnedHouses.Count);
            Assert.AreEqual(0, clone.CurrentOwnedVehicles.Count);
        }

        [Test]
        public async Task TestCloneAsReferenceAndIgnoreIdentifiersAsync()
        {
            EQBPerson clone;
            EQBPerson petra;

            using (var session = NHConfig.OpenSession())
            {
                petra = session.Query<EQBPerson>()
                    .Include(o => o.IdentityCard)
                    .First(o => o.Name == "Petra");
                clone = await (session.DeepCloneAsync(petra, o => o
                    .ForType<EQBPerson>(t => t
                        .ForMember(m => m.Name, opts => opts.Ignore())
                        .CloneIdentifier(false)
                    )
                    .CloneIdentifier(true)
                    .CanCloneAsReference(type => type == typeof(EQBIdentityCard))
                    ));

            }
            Assert.AreEqual(default(int), clone.Id);
            Assert.IsNull(clone.Name);
            Assert.AreEqual(petra.LastName, clone.LastName);
            Assert.AreEqual(petra.IdentityCard, clone.IdentityCard);
        }

        [Test]
        public async Task TestReferencesAsync()
        {
            EQBPerson clone;
            EQBPerson petra;

            using (var session = NHConfig.OpenSession())
            {
                petra = session.Query<EQBPerson>()
                    .Include(o => o.BestFriend.IdentityCard)
                    .Include(o => o.BestFriend.BestFriend)
                    .First(o => o.Name == "Petra");

                clone = await (session.DeepCloneAsync(petra));
            }

            Assert.AreEqual(petra.Id, clone.Id);
            Assert.IsNotNull(clone.BestFriend);
            Assert.IsNotNull(clone.BestFriend.IdentityCard);
            Assert.AreEqual(clone.BestFriend, clone.BestFriend.IdentityCard.Owner);
            Assert.IsNotNull(clone.BestFriend.BestFriend);

            Assert.IsNull(clone.BestFriend.BestFriend.BestFriend);
            Assert.IsNull(clone.IdentityCard);
            Assert.AreEqual(0, clone.OwnedHouses.Count);
            Assert.AreEqual(0, clone.CurrentOwnedVehicles.Count);
        }

        [Test]
        public async Task TestEntityResolverAsync()
        {
            EQBPerson clone;
            EQBPerson petra;

            using (var session = NHConfig.OpenSession())
            {
                petra = session.Query<EQBPerson>()
                    .Include(o => o.BestFriend.IdentityCard)
                    .Include(o => o.BestFriend.BestFriend)
                    .First(o => o.Name == "Petra");

                clone = await (session.DeepCloneAsync(petra, o => o
                    .AddEntityResolver(t => true, (entity, persister) => persister.CreateProxy(persister.GetIdentifier(entity), null))));

                Assert.AreEqual(petra.Id, clone.Id);
                Assert.False(NHibernateUtil.IsInitialized(clone));
                Assert.Throws<LazyInitializationException>(() =>
                {
                    var friend = clone.BestFriend;
                });
            }
        }

        [Test]
        public async Task TestEntityResolverSkipRootAsync()
        {
            EQBPerson clone;
            EQBPerson petra;

            using (var session = NHConfig.OpenSession())
            {
                petra = session.Query<EQBPerson>()
                    .Include(o => o.BestFriend.IdentityCard)
                    .Include(o => o.BestFriend.BestFriend)
                    .First(o => o.Name == "Petra");

                clone = await (session.DeepCloneAsync(petra, o => o
                    .AddEntityResolver((t, e) => e != petra, (entity, persister) => persister.CreateProxy(persister.GetIdentifier(entity), null))));

                Assert.AreEqual(petra.Id, clone.Id);
                Assert.AreEqual(petra.Name, clone.Name);
                Assert.True(NHibernateUtil.IsInitialized(clone));

                Assert.False(NHibernateUtil.IsInitialized(clone.BestFriend));
                Assert.Throws<LazyInitializationException>(() =>
                {
                    var card = clone.BestFriend.IdentityCard;
                });
            }
        }

        [Test]
        public async Task TestCollectionsAsync()
        {
            EQBPerson clone;
            EQBPerson petra;

            using (var session = NHConfig.OpenSession())
            {
                petra = session.Query<EQBPerson>()
                    .Include(o => o.CurrentOwnedVehicles.First().Wheels)
                    .Include(o => o.CurrentOwnedVehicles.First().RoadworthyTests)
                    .Include(o => o.CurrentOwnedVehicles.First().MileageHistory)
                    .Include(o => o.PreviouslyOwnedVehicles)
                    .First(o => o.Name == "Petra");

                clone = await (session.DeepCloneAsync(petra));
            }

            Assert.IsNull(clone.BestFriend);
            Assert.IsNull(clone.IdentityCard);
            Assert.IsNull(clone.MarriedWith);
            Assert.AreEqual(1, clone.CurrentOwnedVehicles.Count);
            Assert.AreEqual(clone, clone.CurrentOwnedVehicles.First().CurrentOwner);
            Assert.AreEqual(4, clone.CurrentOwnedVehicles.First().Wheels.Count);
            Assert.AreEqual(clone.CurrentOwnedVehicles.First(), clone.CurrentOwnedVehicles.First().Wheels.First().Vehicle);
            Assert.AreEqual(2, clone.CurrentOwnedVehicles.First().RoadworthyTests.Count);
            Assert.AreEqual(clone.CurrentOwnedVehicles.First(), clone.CurrentOwnedVehicles.First().RoadworthyTests[new DateTime(2009, 2, 1)].Vehicle);
            Assert.AreEqual(2, clone.CurrentOwnedVehicles.First().MileageHistory.Count);
            Assert.AreEqual(5000, clone.CurrentOwnedVehicles.First().MileageHistory[new DateTime(2010, 1, 1)]);

            Assert.AreEqual(2, clone.PreviouslyOwnedVehicles.Count);
            Assert.AreEqual(clone, clone.CurrentOwnedVehicles.First().CurrentOwner);
        }

        [Test]
        public async Task TestFilterAsync()
        {
            EQBPerson clone;
            EQBPerson petra;

            using (var session = NHConfig.OpenSession())
            {
                petra = session.Query<EQBPerson>()
                    .Include(o => o.PreviouslyOwnedVehicles)
                    .First(o => o.Name == "Petra");

                clone = await (session.DeepCloneAsync(petra, o => o
                    .ForType<EQBPerson>(t => t
                    .ForMember(m => m.Name, m => m.Filter(n => n  + "2"))
                        .ForMember(m => m.PreviouslyOwnedVehicles, m => m
                            .Filter(col => new HashSet<EQBVehicle>(col.Take(1)))
                        )
                    )));
            }

            Assert.AreEqual("Petra2", clone.Name);
            Assert.IsNull(clone.BestFriend);
            Assert.IsNull(clone.IdentityCard);
            Assert.IsNull(clone.MarriedWith);
            Assert.AreEqual(0, clone.CurrentOwnedVehicles.Count);
            Assert.AreEqual(1, clone.PreviouslyOwnedVehicles.Count);
        }

        [Test]
        public async Task TestSkipEntityTypesAsync()
        {
            EQBPerson clone;
            EQBPerson petra;

            using (var session = NHConfig.OpenSession())
            {
                petra = session.Query<EQBPerson>()
                    .Include(o => o.IdentityCard)
                    .Include(o => o.BestFriend.IdentityCard)
                    .Include(o => o.CurrentOwnedVehicles.First().Wheels)
                    .Include(o => o.CurrentOwnedVehicles.First().RoadworthyTests)
                    .Include(o => o.CurrentOwnedVehicles.First().MileageHistory)
                    .First(o => o.Name == "Petra");

                clone = await (session.DeepCloneAsync(petra, o => o
                    .SkipEntityTypes()));
            }

            Assert.IsNull(clone.IdentityCard);
            Assert.IsNull(clone.BestFriend);
            Assert.AreEqual(1, clone.CurrentOwnedVehicles.Count);
            Assert.IsNull(clone.CurrentOwnedVehicles.First().CurrentOwner);
            Assert.AreEqual(4, clone.CurrentOwnedVehicles.First().Wheels.Count);
            Assert.IsNull(clone.CurrentOwnedVehicles.First().Wheels.First().Vehicle);
            Assert.AreEqual(2, clone.CurrentOwnedVehicles.First().RoadworthyTests.Count);
            Assert.IsNull(clone.CurrentOwnedVehicles.First().RoadworthyTests.First().Value.Vehicle);
            Assert.AreEqual(2, clone.CurrentOwnedVehicles.First().MileageHistory.Count);
            Assert.IsNotNull(clone.CurrentOwnedVehicles.First().MileageHistory[new DateTime(2010, 1, 1)]);
        }

        [Test]
        public async Task TestWithoutIdentifiersAsync()
        {
            EQBPerson clone;

            using (var session = NHConfig.OpenSession())
            {
                var petra = session.Query<EQBPerson>()
                    .Include(o => o.IdentityCard)
                    .Include(o => o.BestFriend.IdentityCard)
                    .Include(o => o.CurrentOwnedVehicles.First().Wheels)
                    .Include(o => o.CurrentOwnedVehicles.First().RoadworthyTests)
                    .Include(o => o.CurrentOwnedVehicles.First().MileageHistory)
                    .First(o => o.Name == "Petra");

                clone = await (session.DeepCloneAsync(petra, o => o
                    .CloneIdentifier(false)));
            }

            Assert.AreEqual(0, clone.Id);
            Assert.AreEqual(0, clone.IdentityCard.Id);
            Assert.AreEqual(0, clone.IdentityCard.Owner.Id);
            Assert.AreEqual(0, clone.BestFriend.Id);
            Assert.AreEqual(0, clone.BestFriend.IdentityCard.Id);
            Assert.AreEqual(1, clone.CurrentOwnedVehicles.Count);
            Assert.AreEqual(0, clone.CurrentOwnedVehicles.First().Id);
            Assert.AreEqual(0, clone.CurrentOwnedVehicles.First().CurrentOwner.Id);
            Assert.AreEqual(4, clone.CurrentOwnedVehicles.First().Wheels.Count);
            Assert.AreEqual(0, clone.CurrentOwnedVehicles.First().Wheels.First().Id);
            Assert.AreEqual(0, clone.CurrentOwnedVehicles.First().Wheels.First().Vehicle.Id);
            Assert.AreEqual(2, clone.CurrentOwnedVehicles.First().RoadworthyTests.Count);
            Assert.AreEqual(0, clone.CurrentOwnedVehicles.First().RoadworthyTests.First().Value.Id);
            Assert.AreEqual(0, clone.CurrentOwnedVehicles.First().RoadworthyTests.First().Value.Vehicle.Id);
        }
    }
}
